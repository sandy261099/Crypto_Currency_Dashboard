{"ast":null,"code":"var _jsxFileName = \"/Users/saisandeepnangineni/Desktop/reactjs-crypto-api-dashboard/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\");\n  const [pastData, setpastData] = useState({});\n  const ws = useRef(null);\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\").then(res => res.json()).then(data => pairs = data);\n      let filtered = pairs.filter(pair => {\n        if (pair.quote_currency === \"USD\" && pair.quote_currency != \"BTC\") {\n          return pair;\n        }\n      });\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n\n        return 0;\n      });\n      console.log(filtered);\n      setcurrencies(filtered);\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n  useEffect(() => {\n    if (!first.current) {\n      return;\n    }\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL).then(res => res.json()).then(data => dataArr = data);\n      let formattedData = formatData(dataArr);\n      setpastData(formattedData);\n    };\n\n    fetchHistoricalData();\n\n    ws.current.onmessage = e => {\n      let data = JSON.parse(e.data);\n\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]);\n\n  const handleSelect = e => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let unsub = JSON.stringify(unsubMsg);\n    ws.current.send(unsub);\n    setpair(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"currency\",\n      value: pair,\n      onChange: handleSelect,\n      children: currencies.map((cur, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cur.id,\n          children: cur.display_name\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dashboard, {\n      price: price,\n      data: pastData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rH46R4uVmKEdg5PuX1CTBBhlk0U=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/saisandeepnangineni/Desktop/reactjs-crypto-api-dashboard/src/App.js"],"names":["React","useState","useEffect","useRef","Dashboard","formatData","App","currencies","setcurrencies","pair","setpair","price","setprice","pastData","setpastData","ws","first","url","current","WebSocket","pairs","apiCall","fetch","then","res","json","data","filtered","filter","quote_currency","sort","a","b","base_currency","console","log","msg","type","product_ids","channels","jsonMsg","JSON","stringify","send","historicalDataURL","fetchHistoricalData","dataArr","formattedData","onmessage","e","parse","product_id","handleSelect","unsubMsg","unsub","target","value","map","cur","idx","id","display_name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAO,cAAP;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAE5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,MAAD,CAAlC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMc,EAAE,GAAGZ,MAAM,CAAC,IAAD,CAAjB;AAEA,MAAIa,KAAK,GAAGb,MAAM,CAAC,KAAD,CAAlB;AACA,QAAMc,GAAG,GAAG,8BAAZ;AAGAf,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,EAAE,CAACG,OAAH,GAAa,IAAIC,SAAJ,CAAc,gCAAd,CAAb;AAEA,QAAIC,KAAK,GAAG,EAAZ;;AAEA,UAAMC,OAAO,GAAG,YAAY;AAC1B,YAAMC,KAAK,CAACL,GAAG,GAAG,WAAP,CAAL,CACHM,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAWN,KAAK,GAAGM,IAFrB,CAAN;AAIA,UAAIC,QAAQ,GAAGP,KAAK,CAACQ,MAAN,CAAcnB,IAAD,IAAU;AACpC,YAAIA,IAAI,CAACoB,cAAL,KAAwB,KAAxB,IAAiCpB,IAAI,CAACoB,cAAL,IAAuB,KAA5D,EAAmE;AACjE,iBAAOpB,IAAP;AACD;AACF,OAJc,CAAf;AAMAkB,MAAAA,QAAQ,GAAGA,QAAQ,CAACG,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,YAAID,CAAC,CAACE,aAAF,GAAkBD,CAAC,CAACC,aAAxB,EAAuC;AACrC,iBAAO,CAAC,CAAR;AACD;;AACD,YAAIF,CAAC,CAACE,aAAF,GAAkBD,CAAC,CAACC,aAAxB,EAAuC;AACrC,iBAAO,CAAP;AACD;;AACD,eAAO,CAAP;AACD,OARU,CAAX;AAUAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ;AACAnB,MAAAA,aAAa,CAACmB,QAAD,CAAb;AAEAX,MAAAA,KAAK,CAACE,OAAN,GAAgB,IAAhB;AACD,KAzBD;;AA2BAG,IAAAA,OAAO;AACR,GAjCQ,EAiCN,EAjCM,CAAT;AAmCAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACc,KAAK,CAACE,OAAX,EAAoB;AAElB;AACD;;AAGD,QAAIkB,GAAG,GAAG;AACRC,MAAAA,IAAI,EAAE,WADE;AAERC,MAAAA,WAAW,EAAE,CAAC7B,IAAD,CAFL;AAGR8B,MAAAA,QAAQ,EAAE,CAAC,QAAD;AAHF,KAAV;AAKA,QAAIC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeN,GAAf,CAAd;AACArB,IAAAA,EAAE,CAACG,OAAH,CAAWyB,IAAX,CAAgBH,OAAhB;AAEA,QAAII,iBAAiB,GAAI,GAAE3B,GAAI,aAAYR,IAAK,4BAAhD;;AACA,UAAMoC,mBAAmB,GAAG,YAAY;AACtC,UAAIC,OAAO,GAAG,EAAd;AACA,YAAMxB,KAAK,CAACsB,iBAAD,CAAL,CACHrB,IADG,CACGC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADX,EAEHF,IAFG,CAEGG,IAAD,IAAWoB,OAAO,GAAGpB,IAFvB,CAAN;AAIA,UAAIqB,aAAa,GAAG1C,UAAU,CAACyC,OAAD,CAA9B;AACAhC,MAAAA,WAAW,CAACiC,aAAD,CAAX;AACD,KARD;;AAUAF,IAAAA,mBAAmB;;AAEnB9B,IAAAA,EAAE,CAACG,OAAH,CAAW8B,SAAX,GAAwBC,CAAD,IAAO;AAC5B,UAAIvB,IAAI,GAAGe,IAAI,CAACS,KAAL,CAAWD,CAAC,CAACvB,IAAb,CAAX;;AACA,UAAIA,IAAI,CAACW,IAAL,KAAc,QAAlB,EAA4B;AAC1B;AACD;;AAED,UAAIX,IAAI,CAACyB,UAAL,KAAoB1C,IAAxB,EAA8B;AAC5BG,QAAAA,QAAQ,CAACc,IAAI,CAACf,KAAN,CAAR;AACD;AACF,KATD;AAUD,GAtCQ,EAsCN,CAACF,IAAD,CAtCM,CAAT;;AAwCA,QAAM2C,YAAY,GAAIH,CAAD,IAAO;AAC1B,QAAII,QAAQ,GAAG;AACbhB,MAAAA,IAAI,EAAE,aADO;AAEbC,MAAAA,WAAW,EAAE,CAAC7B,IAAD,CAFA;AAGb8B,MAAAA,QAAQ,EAAE,CAAC,QAAD;AAHG,KAAf;AAKA,QAAIe,KAAK,GAAGb,IAAI,CAACC,SAAL,CAAeW,QAAf,CAAZ;AAEAtC,IAAAA,EAAE,CAACG,OAAH,CAAWyB,IAAX,CAAgBW,KAAhB;AAEA5C,IAAAA,OAAO,CAACuC,CAAC,CAACM,MAAF,CAASC,KAAV,CAAP;AACD,GAXD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BAEI;AAAQ,MAAA,IAAI,EAAC,UAAb;AAAwB,MAAA,KAAK,EAAE/C,IAA/B;AAAqC,MAAA,QAAQ,EAAE2C,YAA/C;AAAA,gBACG7C,UAAU,CAACkD,GAAX,CAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,4BACE;AAAkB,UAAA,KAAK,EAAED,GAAG,CAACE,EAA7B;AAAA,oBACGF,GAAG,CAACG;AADP,WAAaF,GAAb;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OANA;AADH;AAAA;AAAA;AAAA;AAAA,YAFJ,eAYE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEhD,KAAlB;AAAyB,MAAA,IAAI,EAAEE;AAA/B;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAnHuBP,G;;KAAAA,G","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./styles.css\";\n\nexport default function App() {\n\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\");\n  const [pastData, setpastData] = useState({});\n  const ws = useRef(null);\n\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n\n\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\")\n        .then((res) => res.json())\n        .then((data) => (pairs = data));\n\n      let filtered = pairs.filter((pair) => {\n        if (pair.quote_currency === \"USD\" && pair.quote_currency != \"BTC\") {\n          return pair;\n        }\n      });\n\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n        return 0;\n      });\n\n      console.log(filtered);\n      setcurrencies(filtered);\n\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n\n  useEffect(() => {\n    if (!first.current) {\n\n      return;\n    }\n\n\n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n\n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => (dataArr = data));\n\n      let formattedData = formatData(dataArr);\n      setpastData(formattedData);\n    };\n\n    fetchHistoricalData();\n\n    ws.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]);\n\n  const handleSelect = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let unsub = JSON.stringify(unsubMsg);\n\n    ws.current.send(unsub);\n\n    setpair(e.target.value);\n  };\n  return (\n    <div className=\"container\">\n      {\n        <select name=\"currency\" value={pair} onChange={handleSelect}>\n          {currencies.map((cur, idx) => {\n            return (\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            );\n          })}\n        </select>\n      }\n      <Dashboard price={price} data={pastData} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}